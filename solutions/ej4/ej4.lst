     1                                  global main
     2                                  extern printf
     3                                  %include "macros.asm"
     1                              <1> ;Recibe un string y lo imprime
     2                              <1> %macro print 1
     3                              <1>   mov     rdi,    %1
     4                              <1>   sub     rsp,    8
     5                              <1>   call    printf
     6                              <1>   add     rsp,    8
     7                              <1> %endmacro
     8                              <1> 
     9                              <1> ;Recibe un string y un argumento
    10                              <1> %macro printArg 2
    11                              <1>   mov     rdi,    %1
    12                              <1>   mov     rsi,    [%2]
    13                              <1>   sub     rsp,    8
    14                              <1>   call    printf
    15                              <1>   add     rsp,    8
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> 
    19                              <1> ;Recibe:
    20                              <1> ;     un string que se imprime para pedir un valor
    21                              <1> ;     un buffer donde se guarda el valor
    22                              <1> ;     un formato para sscanf
    23                              <1> ;     un puntero a la variable donde se guarda el valor
    24                              <1> %macro read 4
    25                              <1>   print %1
    26                              <1> 
    27                              <1>   mov     rdi,    %2
    28                              <1> 
    29                              <1>   sub     rsp,    8
    30                              <1>   call    gets
    31                              <1>   add     rsp,    8
    32                              <1> 
    33                              <1>   mov     rdi,    %2
    34                              <1>   mov     rsi,    %3
    35                              <1>   mov     rdx,    %4
    36                              <1> 
    37                              <1>   sub     rsp,    8
    38                              <1>   call    sscanf
    39                              <1>   add     rsp,    8
    40                              <1> 
    41                              <1> %endmacro
    42                              <1> 
    43                              <1> 
    44                              <1> extern  printf
    45                              <1> extern  gets
    46                              <1> extern  sscanf
    47                              <1> 
     4                                  
     5                                  section .data
     6 00000000 496E67726573652075-       msg             db      "Ingrese un numero: ", 0
     6 00000009 6E206E756D65726F3A-
     6 00000012 2000               
     7 00000014 256C6900                  format          db      "%li", 0
     8 00000018 496E677265736F3A20-       msgInput        db      "Ingreso: %li", 10, 0
     8 00000021 256C690A00         
     9 00000026 0000000000000000          iterations      dq      0
    10                                  
    11                                  section .bss
    12 00000000 <res 64h>                 buffer          resb    100
    13 00000064 ????????????????          number          resq    1
    14 0000006C <res 20h>                 numberVector    times 4 resq 1
    15                                  
    16                                  
    17                                  section .text
    18                                  
    19                                  main:
    20                                    iterate:
    21                                      read  msg, buffer, format, number
    25                              <1>  print %1
     3 00000000 48BF-               <2>  mov rdi, %1
     3 00000002 [0000000000000000]  <2>
     4 0000000A 4883EC08            <2>  sub rsp, 8
     5 0000000E E8(00000000)        <2>  call printf
     6 00000013 4883C408            <2>  add rsp, 8
    26                              <1> 
    27 00000017 48BF-               <1>  mov rdi, %2
    27 00000019 [0000000000000000]  <1>
    28                              <1> 
    29 00000021 4883EC08            <1>  sub rsp, 8
    30 00000025 E8(00000000)        <1>  call gets
    31 0000002A 4883C408            <1>  add rsp, 8
    32                              <1> 
    33 0000002E 48BF-               <1>  mov rdi, %2
    33 00000030 [0000000000000000]  <1>
    34 00000038 48BE-               <1>  mov rsi, %3
    34 0000003A [1400000000000000]  <1>
    35 00000042 48BA-               <1>  mov rdx, %4
    35 00000044 [6400000000000000]  <1>
    36                              <1> 
    37 0000004C 4883EC08            <1>  sub rsp, 8
    38 00000050 E8(00000000)        <1>  call sscanf
    39 00000055 4883C408            <1>  add rsp, 8
    40                              <1> 
    22 00000059 488B0425[64000000]          mov   rax, [number]       ; Nuevo número
    23                                  
    24 00000061 48BA-                       mov   rdx, numberVector   ; Dirección del vector
    24 00000063 [6C00000000000000] 
    25 0000006B 488B0C25[26000000]          mov   rcx, [iterations]   ; Iteración, indice del vector
    26 00000073 486BC908                    imul  rcx, rcx, 8         ; Multiplicamos por 8 para obtener el offset (Corrimiento) (8 bytes por número)
    27 00000077 4801CA                      add   rdx, rcx            ; Sumamos el offset a la dirección del vector
    28 0000007A 488902                      mov   [rdx], rax          ; Guardamos el número en el vector
    29                                      
    30 0000007D 48FF0425[26000000]          inc qword[iterations]
    31 00000085 48833C25[26000000]-         cmp qword[iterations], 4
    31 0000008D 04                 
    32 0000008E 0F8C6CFFFFFF                jl iterate
    33                                  
    34 00000094 48C70425[26000000]-       mov qword[iterations], 0
    34 0000009C 00000000           
    35                                    printAll:
    36 000000A0 48BA-                       mov   rdx, numberVector   ; Dirección del vector
    36 000000A2 [6C00000000000000] 
    37 000000AA 488B0C25[26000000]          mov   rcx, [iterations]   ; Iteración, indice del vector
    38 000000B2 486BC908                    imul  rcx, rcx, 8         ; Multiplicamos por 8 para obtener el offset (Corrimiento) (8 bytes por número)
    39 000000B6 4801CA                      add   rdx, rcx            ; Sumamos el offset a la dirección del vector
    40                                  
    41                                      printArg msgInput, rdx
    11 000000B9 48BF-               <1>  mov rdi, %1
    11 000000BB [1800000000000000]  <1>
    12 000000C3 488B32              <1>  mov rsi, [%2]
    13 000000C6 4883EC08            <1>  sub rsp, 8
    14 000000CA E8(00000000)        <1>  call printf
    15 000000CF 4883C408            <1>  add rsp, 8
    42                                  
    43 000000D3 48FF0425[26000000]          inc qword[iterations]
    44 000000DB 48833C25[26000000]-         cmp qword[iterations], 4
    44 000000E3 04                 
    45 000000E4 7CBA                        jl printAll
    46 000000E6 C3                        ret
    47                                      
    48                                      
    49                                  
    50                                  
    51                                  
    52                                  
