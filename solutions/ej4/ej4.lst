     1                                  global main
     2                                  extern printf
     3                                  %include "macros.asm"
     1                              <1> ;Recibe un string y lo imprime
     2                              <1> %macro print 1
     3                              <1>   mov     rdi,    %1
     4                              <1>   sub     rsp,    8
     5                              <1>   call    printf
     6                              <1>   add     rsp,    8
     7                              <1> %endmacro
     8                              <1> 
     9                              <1> ;Recibe un string y un argumento
    10                              <1> %macro printArg 2
    11                              <1>   mov     rdi,    %1
    12                              <1>   mov     rsi,    [%2]
    13                              <1>   sub     rsp,    8
    14                              <1>   call    printf
    15                              <1>   add     rsp,    8
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> 
    19                              <1> ;Recibe:
    20                              <1> ;     un string que se imprime para pedir un valor
    21                              <1> ;     un buffer donde se guarda el valor
    22                              <1> ;     un formato para sscanf
    23                              <1> ;     un puntero a la variable donde se guarda el valor
    24                              <1> %macro read 4
    25                              <1>   print %1
    26                              <1> 
    27                              <1>   mov     rdi,    %2
    28                              <1> 
    29                              <1>   sub     rsp,    8
    30                              <1>   call    gets
    31                              <1>   add     rsp,    8
    32                              <1> 
    33                              <1>   mov     rdi,    %2
    34                              <1>   mov     rsi,    %3
    35                              <1>   mov     rdx,    %4
    36                              <1> 
    37                              <1>   sub     rsp,    8
    38                              <1>   call    sscanf
    39                              <1>   add     rsp,    8
    40                              <1> 
    41                              <1> %endmacro
    42                              <1> 
    43                              <1> 
    44                              <1> extern  printf
    45                              <1> extern  gets
    46                              <1> extern  sscanf
    47                              <1> 
     4                                  
     5                                  section .data
     6 00000000 496E67726573652075-       msg             db      "Ingrese un numero: ", 0
     6 00000009 6E206E756D65726F3A-
     6 00000012 2000               
     7 00000014 256C6900                  format          db      "%li", 0
     8                                  
     9                                  section .bss
    10 00000000 ????????????????          iterations      resq    1
    11 00000008 <res 64h>                 buffer          resb    100
    12 0000006C ????????????????          number          resq    1
    13 00000074 <res 20h>                 numberVector    times 4 resq 1
    14                                  
    15                                  
    16                                  section .text
    17                                  
    18                                  main:
    19 00000000 B800000000                mov rax, 0
    20 00000005 48890425[00000000]        mov [iterations], rax
    21                                    iterate:
    22                                      read  msg, buffer, format, number
    25                              <1>  print %1
     3 0000000D 48BF-               <2>  mov rdi, %1
     3 0000000F [0000000000000000]  <2>
     4 00000017 4883EC08            <2>  sub rsp, 8
     5 0000001B E8(00000000)        <2>  call printf
     6 00000020 4883C408            <2>  add rsp, 8
    26                              <1> 
    27 00000024 48BF-               <1>  mov rdi, %2
    27 00000026 [0800000000000000]  <1>
    28                              <1> 
    29 0000002E 4883EC08            <1>  sub rsp, 8
    30 00000032 E8(00000000)        <1>  call gets
    31 00000037 4883C408            <1>  add rsp, 8
    32                              <1> 
    33 0000003B 48BF-               <1>  mov rdi, %2
    33 0000003D [0800000000000000]  <1>
    34 00000045 48BE-               <1>  mov rsi, %3
    34 00000047 [1400000000000000]  <1>
    35 0000004F 48BA-               <1>  mov rdx, %4
    35 00000051 [6C00000000000000]  <1>
    36                              <1> 
    37 00000059 4883EC08            <1>  sub rsp, 8
    38 0000005D E8(00000000)        <1>  call sscanf
    39 00000062 4883C408            <1>  add rsp, 8
    40                              <1> 
    23 00000066 488B0425[6C000000]          mov   rax, [number]       ; Nuevo número
    24                                  
    25 0000006E 48BA-                       mov   rdx, numberVector   ; Dirección del vector
    25 00000070 [7400000000000000] 
    26 00000078 488B0C25[00000000]          mov   rcx, [iterations]   ; Iteración, indice del vector
    27 00000080 486BC908                    imul  rcx, rcx, 8         ; Multiplicamos por 8 para obtener el offset (Corrimiento) (8 bytes por número)
    28 00000084 4801CA                      add   rdx, rcx            ; Sumamos el offset a la dirección del vector
    29 00000087 488902                      mov   [rdx], rax          ; Guardamos el número en el vector
    30                                      
    31 0000008A 48FF0425[00000000]          inc qword[iterations]
    32 00000092 48833C25[00000000]-         cmp qword[iterations], 4
    32 0000009A 04                 
    33 0000009B 0F8C6CFFFFFF                jl iterate
    34                                  
    35 000000A1 C3                        ret
    36                                      
    37                                      
    38                                  
    39                                  
    40                                  
    41                                  
